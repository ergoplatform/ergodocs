name: Deploy and verify live site

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  SSH_USER: root
  SSH_HOST: 213.239.193.208
  PROJECT_DIR: /var/www/ergodocs
  DOMAIN: docs.ergoplatform.com
  JUPYTER_PLATFORM_DIRS: "1"

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install SSH key
        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{ secrets.DEPLOY_KEY }}
          known_hosts: ${{ secrets.KNOWN_HOSTS }}

      - name: üöÄ Remote build & atomic deploy
        shell: bash
        run: |
          # Pass env into remote, keep heredoc literal for safety
          ssh "$SSH_USER@$SSH_HOST" \
            "PROJECT_DIR='${PROJECT_DIR}' DOMAIN='${DOMAIN}' JUPYTER_PLATFORM_DIRS='${JUPYTER_PLATFORM_DIRS}' bash -s" <<'EOF'
            set -Eeuo pipefail

            echo "üìÇ cd to project dir"
            : "${PROJECT_DIR:?PROJECT_DIR is required}"
            cd "$PROJECT_DIR"

            echo "üîß Toolchain"
            command -v mkdocs || true
            mkdocs --version || true

            echo "üîÑ Git pull (stash if needed)"
            git stash || true
            git pull --ff-only

            echo "üêç Choose Python & create venv"
            PYBIN="$(command -v python3.11 || command -v python3.10 || command -v python3)"
            echo "Using Python at: $PYBIN"
            "$PYBIN" -m venv .venv
            source .venv/bin/activate

            echo "üì¶ Install deps (no fail on warnings later)"
            python -m pip install -U pip
            # If requirements.txt present, use it; otherwise install a safe minimal set
            if [ -f requirements.txt ]; then
              python -m pip install -r requirements.txt
            else
              python -m pip install mkdocs mkdocs-material
            fi

            # Silence the Jupyter path deprecation
            export JUPYTER_PLATFORM_DIRS="${JUPYTER_PLATFORM_DIRS}"

            echo "üßπ Clean old build dir"
            rm -rf site || true

            echo "üèó mkdocs build (no strict, so warnings won't fail)"
            mkdocs build --no-strict

            echo "üîÅ Atomic deploy to site_live"
            # Prepare a new staged dir
            rm -rf site_new
            mkdir -p site_new
            rsync -a --delete site/ site_new/

            # Flip the live directory atomically
            rm -rf site_live_prev || true
            if [ -d site_live ]; then
              mv site_live site_live_prev
            fi
            mv site_new site_live

            # Fix ownership for either www-data or caddy, ignore failures
            chown -R www-data:www-data site_live || true
            chown -R caddy:caddy site_live || true

            # Keep a simple deploy marker
            date -u +"%Y-%m-%dT%H:%M:%SZ" > site_live/.deployed-at

            echo "üß™ Nginx config test & reload (if present)"
            if command -v nginx >/dev/null 2>&1; then
              nginx -t
              systemctl reload nginx || systemctl restart nginx || true
            fi

            echo "üóí Tail last error/access logs if they exist"
            if [ -f /var/log/nginx/error.log ]; then
              echo "--- /var/log/nginx/error.log (tail -n 80) ---"
              tail -n 80 /var/log/nginx/error.log || true
            fi
            if [ -f /var/log/nginx/access.log ]; then
              echo "--- /var/log/nginx/access.log (tail -n 20) ---"
              tail -n 20 /var/log/nginx/access.log || true
            fi

            echo "üëÄ Sanity list a few live paths"
            find "$PROJECT_DIR/site_live" -maxdepth 2 -type d | head -n 20 || true

            echo "‚úÖ Remote deploy finished"


      - name: üîç Recently updated files on server
        shell: bash
        run: |
          ssh "$SSH_USER@$SSH_HOST" "find '$PROJECT_DIR/site_live' -type f -printf 'üïí %TY-%Tm-%Td %TH:%TM:%TS %p\n' | sort -r | head -n 12 || true"

      - name: üåê Live HTTP smoke tests (no cache)
        shell: bash
        run: |
          set -Eeuo pipefail
          BASE="https://${DOMAIN}"

          echo "üîé Fetch live homepage HTML"
          curl -fsS -H 'Cache-Control: no-cache' "$BASE/" > /tmp/home.html || {
            echo "‚ùå Failed to fetch home page (origin/Cloudflare issue?)"
            exit 1
          }

          # Check HTML closed properly
          if ! grep -q "</html>" /tmp/home.html; then
            echo "‚ùå Live HTML incomplete"
            echo "---- First 50 lines of homepage ----"
            head -n 50 /tmp/home.html || true
            exit 1
          fi

          echo "üîé Extract asset URLs from live HTML"
          LIVE_JS=$(grep -o 'assets/javascripts/[^"]*' /tmp/home.html | sort -u || true)
          LIVE_CSS=$(grep -o 'assets/stylesheets/[^"]*' /tmp/home.html | sort -u || true)

          echo "‚úÖ Check each asset returns 200"
          FAIL=0
          for f in $LIVE_JS $LIVE_CSS; do
            url="$BASE/$f"
            code=$(curl -s -o /dev/null -w "%{http_code}" "$url")
            echo "$code $url"
            [ "$code" = "200" ] || FAIL=1
          done
          if [ "$FAIL" -ne 0 ]; then
            echo "‚ùå One or more assets failed (blank page symptom)."
            echo "Response headers for /:"
            curl -I "$BASE/" || true
            exit 1
          fi

          echo "üß™ Smoke-check a content page"
          curl -fsS -H 'Cache-Control: no-cache' "$BASE/faq/" | grep -q "</html>" || {
            echo "‚ùå FAQ page did not return valid HTML"
            curl -I "$BASE/faq/" || true
            exit 1
          }

      - name: üßæ Pull last Nginx logs (remote) when HTTP checks fail
        if: failure()
        shell: bash
        run: |
          ssh "$SSH_USER@$SSH_HOST" '
            echo "--- /var/log/nginx/error.log (tail -n 120) ---"
            tail -n 120 /var/log/nginx/error.log || true
            echo "--- /var/log/nginx/access.log (tail -n 40) ---"
            tail -n 40 /var/log/nginx/access.log || true

            echo "üîé Active server blocks mentioning ${DOMAIN}"
            if command -v nginx >/dev/null 2>&1; then
              nginx -T 2>/dev/null | grep -n "${DOMAIN}" -n -C2 || true
            fi

            echo "üîé Free -m / top summary"
            free -m || true
            ps axo stat,ppid,pid,cmd | awk '"'"'$1 ~ /Z/ {print $0}'"'"' | head -n 20 || true
          '
