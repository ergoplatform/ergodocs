name: Deploy and verify live site

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  SSH_USER: root
  SSH_HOST: 213.239.193.208
  DOMAIN: docs.ergoplatform.com
  PROJECT_DIR: /var/www/ergodocs

jobs:
  deploy:
    runs-on: ubuntu-latest
    name: Deploy and verify live site
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install SSH key
        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{ secrets.DEPLOY_KEY }}
          known_hosts: ${{ secrets.KNOWN_HOSTS }}

      - name: Remote deploy (build on server and sync to site_live)
        run: |
          ssh "$SSH_USER@$SSH_HOST" "PROJECT_DIR='$PROJECT_DIR' DOMAIN='$DOMAIN' bash -s" <<'EOSSH'
          set -eE -o pipefail

          echo "üìÇ Ensure project directory exists"
          mkdir -p "$PROJECT_DIR"
          cd "$PROJECT_DIR"

          echo "üîß Toolchain"
          command -v mkdocs || true
          mkdocs --version || true

          echo "üîÑ Git pull (if repo)"
          if [ -d ".git" ]; then
            git config --global --add safe.directory "$PROJECT_DIR" || true
            git stash --all || true
            git pull --rebase
          else
            echo "‚ÑπÔ∏è Not a git repo here; skipping pull"
          fi

          echo "üß∞ Ensure python3-venv"
          export DEBIAN_FRONTEND=noninteractive
          apt-get update -y
          apt-get install -y python3-venv python3-pip

          echo "üêç venv"
          python3 -m venv .venv
          . .venv/bin/activate

          echo "üì¶ Dependencies"
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          else
            pip install mkdocs mkdocs-material
          fi

          echo "üèó mkdocs build (no --strict)"
          rm -rf site_next
          mkdocs build -d site_next

          echo "üßπ prepare live dir"
          mkdir -p site_live

          echo "üîÅ rsync site_next -> site_live (atomic-ish)"
          rsync -a --delete site_next/ site_live/

          echo "üîë ownership (match web user if needed)"
          if id caddy >/dev/null 2>&1; then
            chown -R caddy:caddy site_live
          else
            chown -R www-data:www-data site_live || true
          fi

          date -u +"%Y-%m-%dT%H:%M:%SZ" > site_live/.deployed-at

          echo "‚úÖ Remote deploy finished"
          EOSSH

      - name: Disable conflicting nginx vhosts (reversible)
        run: |
          ssh "$SSH_USER@$SSH_HOST" "DOMAIN='$DOMAIN' bash -s" <<'EOSSH'
          set -eE -o pipefail
          changed=0

          # Disable Debian default and any vhost that proxies to :8000 or duplicates docs.ergoplatform.com
          for f in /etc/nginx/sites-enabled/*; do
            [ -f "$f" ] || continue
            base="$(basename "$f")"
            # Keep the intended static site vhost
            if [ "$base" = "ergo-docs.conf" ]; then
              continue
            fi
            if [ "$base" = "default" ] \
               || grep -qE 'server_name\s+docs\.ergoplatform\.com' "$f" \
               || grep -qE 'proxy_pass\s+http://(127\.0\.0\.1|localhost):8000' "$f"; then
              new="${f}.disabled.$(date +%s)"
              echo "üö´ Disabling $f -> $new"
              mv "$f" "$new"
              changed=1
            fi
          done

          if [ "$changed" -eq 1 ]; then
            echo "üß™ nginx -t"
            nginx -t
            echo "üîÅ Reload nginx"
            systemctl reload nginx
          else
            echo "‚ÑπÔ∏è No conflicting vhosts found"
          fi
          EOSSH

      - name: Quick nginx sanity (remote, non-blocking)
        run: |
          ssh "$SSH_USER@$SSH_HOST" "PROJECT_DIR='$PROJECT_DIR' DOMAIN='$DOMAIN' bash -s" <<'EOSSH'
          set +e
          echo "üîé Nginx ports"
          ss -ltnp | awk "/nginx/ || NR==1"

          echo "üîé HTTP vhost response"
          curl -sI -H "Host: $DOMAIN" http://127.0.0.1/ | sed -n '1,12p'

          echo "üîé HTTPS vhost response (origin cert, ignore verify)"
          curl -skI --resolve "$DOMAIN:443:127.0.0.1" "https://$DOMAIN/" | sed -n '1,12p'

          echo "üîé Sample asset status (HTTP)"
          curl -s -o /dev/null -w "assets.css http %{http_code}\n" -H "Host: $DOMAIN" "http://127.0.0.1/assets/stylesheets/main.css"

          echo "üîé Sample asset status (HTTPS)"
          curl -sk -o /dev/null -w "assets.css https %{http_code}\n" --resolve "$DOMAIN:443:127.0.0.1" "https://$DOMAIN/assets/stylesheets/main.css"

          echo "üóí error.log (tail 40)"
          tail -n 40 /var/log/nginx/error.log || true

          echo "üóí access.log (tail 20)"
          tail -n 20 /var/log/nginx/access.log || true

          echo "‚úÖ remote sanity complete"
          EOSSH

      - name: Show last modified files in live site
        run: |
          ssh "$SSH_USER@$SSH_HOST" "find '$PROJECT_DIR/site_live' -type f -printf 'üïí %TY-%Tm-%Td %TH:%TM:%TS %p\n' | sort -r | head -n 12 || true"

      - name: List site_live top-level (non-blocking)
        run: |
          ssh "$SSH_USER@$SSH_HOST" "ls -1 '$PROJECT_DIR/site_live' | head -n 20 || true"
