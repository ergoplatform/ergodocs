name: Deploy and verify live site

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  SSH_USER: root
  SSH_HOST: 213.239.193.208
  DOMAIN: docs.ergoplatform.com
  JUPYTER_PLATFORM_DIRS: "1"

jobs:
  deploy:
    name: Deploy and verify live site
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install SSH key
        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{ secrets.DEPLOY_KEY }}
          known_hosts: ${{ secrets.KNOWN_HOSTS }}

      # --- Build ON the server (no --strict; warnings won't fail) ---
      - name: Remote build (mkdocs)
        run: |
          ssh "$SSH_USER@$SSH_HOST" 'bash -s' <<'EOSSH'
          set -e
          PROJECT_DIR="/var/www/ergodocs"

          echo "üìÇ cd $PROJECT_DIR"
          cd "$PROJECT_DIR"

          echo "üîÑ git pull"
          git stash || true
          git pull --ff-only

          echo "üß∞ ensure python3-venv"
          apt-get update -y && apt-get install -y python3-venv

          echo "üêç venv"
          python3 -m venv .venv
          . .venv/bin/activate

          echo "üì¶ pip install"
          pip install --upgrade pip
          pip install -r requirements.txt

          echo "üßπ clean previous build dir"
          rm -rf site

          echo "üèó mkdocs build (no strict)"
          export JUPYTER_PLATFORM_DIRS=1
          mkdocs build

          echo "‚úÖ build complete"
          EOSSH

      # --- Promote: remove site_live then move site ‚Üí site_live ---
      - name: Promote site (site ‚Üí site_live)
        run: |
          ssh "$SSH_USER@$SSH_HOST" 'bash -s' <<'EOSSH'
          set -e
          PROJECT_DIR="/var/www/ergodocs"
          cd "$PROJECT_DIR"

          if [ -d site ]; then
            echo "üóë removing old site_live"
            rm -rf site_live

            echo "üîÅ moving site ‚Üí site_live"
            mv site site_live

            date -u +"%FT%TZ" > site_live/.deployed-at

            echo "üîë perms (best effort)"
            chown -R www-data:www-data site_live || true
            chmod -R a+rX site_live || true
          else
            echo "‚ö†Ô∏è no 'site' dir to promote"
          fi
          EOSSH

      # --- Disable stray proxy vhost (rename only; reversible) ---
      - name: Disable proxying vhost (kept, just renamed)
        run: |
          ssh "$SSH_USER@$SSH_HOST" 'bash -s' <<'EOSSH'
          set -e
          changed=0
          for f in /etc/nginx/sites-enabled/*; do
            [ -f "$f" ] || continue
            if grep -qE 'server_name\s+docs\.ergoplatform\.com' "$f" && grep -q 'proxy_pass.*127\.0\.0\.1:8000' "$f"; then
              new="${f}.disabled.$(date +%s)"
              echo "üö´ disabling proxy vhost: $f ‚Üí $new"
              mv "$f" "$new"
              changed=1
            fi
          done

          if [ "$changed" -eq 1 ]; then
            echo "üß™ nginx -t && reload"
            nginx -t && systemctl reload nginx
          else
            echo "‚ÑπÔ∏è no proxy vhost for docs.ergoplatform.com found (nothing to do)"
          fi
          EOSSH

      - name: Recently updated files on server
        run: |
          ssh "$SSH_USER@$SSH_HOST" "find '/var/www/ergodocs/site_live' -type f -printf 'üïí %TY-%Tm-%Td %TH:%TM:%TS %p\n' | sort -r | head -n 12 || true"

      # Non-blocking origin sanity; prints diagnostics only
      - name: Origin sanity (no fail; print diagnostics)
        run: |
          set +e
          DOMAIN="${DOMAIN}"

          echo "üîé GET https://$DOMAIN/ via local nginx (bypass CF with --resolve, ignore cert with -k)"
          curl -ksS --resolve "$DOMAIN:443:127.0.0.1" "https://$DOMAIN/" | head -n 1 | sed 's/^/HTML: /'

          echo "üîé GET http://127.0.0.1/ with Host: $DOMAIN"
          curl -sS -H "Host: $DOMAIN" "http://127.0.0.1/" | head -n 1 | sed 's/^/HTML: /'

          echo "üîé Sample asset 200? (best effort)"
          curl -sS -o /dev/null -w "assets.css http %{:http_code}\n" -H "Host: $DOMAIN" "http://127.0.0.1/assets/stylesheets/main.css" || true
          curl -sS -o /dev/null -w "assets.css https %{:http_code}\n" --resolve "$DOMAIN:443:127.0.0.1" -k "https://$DOMAIN/assets/stylesheets/main.css" || true

          echo "üóí nginx error.log (tail 60)"
          ssh "$SSH_USER@$SSH_HOST" "tail -n 60 /var/log/nginx/error.log || true"

          echo "üóí nginx access.log (tail 40)"
          ssh "$SSH_USER@$SSH_HOST" "tail -n 40 /var/log/nginx/access.log || true"

          echo "‚úÖ sanity step finished (non-blocking)"

      - name: Sanity list a few paths
        run: |
          ssh "$SSH_USER@$SSH_HOST" "ls -1 '/var/www/ergodocs/site_live' | head -n 20 || true"
