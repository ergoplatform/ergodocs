name: Deploy and verify live site

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  SSH_USER: root
  SSH_HOST: 213.239.193.208
  DOMAIN: docs.ergoplatform.com
  PROJECT_DIR: /var/www/ergodocs

jobs:
  deploy:
    runs-on: ubuntu-latest
    name: Deploy and verify live site

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install SSH key
        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{ secrets.DEPLOY_KEY }}
          known_hosts: ${{ secrets.KNOWN_HOSTS }}

      # Sync the current repo contents to the server so we don't rely on git there
      - name: Sync sources to server
        run: |
          rsync -az --delete \
            --exclude '.git' \
            --exclude '.github' \
            --exclude 'site*' \
            ./ "$SSH_USER@$SSH_HOST:$PROJECT_DIR/src/"

      # Build on the server from the just-synced sources and publish to site_live
      - name: Remote mkdocs build & publish
        run: |
          ssh "$SSH_USER@$SSH_HOST" "PROJECT_DIR='$PROJECT_DIR' DOMAIN='$DOMAIN' bash -s" <<'EOSSH'
          set -eE -o pipefail

          SRC_DIR="$PROJECT_DIR/src"
          LIVE_DIR="$PROJECT_DIR/site_live"
          NEXT_DIR="$PROJECT_DIR/site_next"

          echo "🔧 Ensure toolchain"
          export DEBIAN_FRONTEND=noninteractive
          apt-get update -y
          apt-get install -y python3-venv python3-pip rsync

          echo "🐍 venv"
          python3 -m venv "$PROJECT_DIR/.venv"
          . "$PROJECT_DIR/.venv/bin/activate"
          python -m pip install --upgrade pip

          echo "📦 Install deps"
          if [ -f "$SRC_DIR/requirements.txt" ]; then
            pip install -r "$SRC_DIR/requirements.txt"
          else
            pip install mkdocs mkdocs-material
          fi

          echo "🏗 mkdocs build (no --strict)"
          rm -rf "$NEXT_DIR"
          mkdir -p "$NEXT_DIR" "$LIVE_DIR"
          cd "$SRC_DIR"
          mkdocs build -d "$NEXT_DIR"

          echo "🧹 Publish to live"
          rsync -a --delete "$NEXT_DIR/" "$LIVE_DIR/"

          # Ownership (best-effort)
          if id caddy >/dev/null 2>&1; then
            chown -R caddy:caddy "$LIVE_DIR" || true
          elif id www-data >/dev/null 2>&1; then
            chown -R www-data:www-data "$LIVE_DIR" || true
          fi

          date -u +"%Y-%m-%dT%H:%M:%SZ" > "$LIVE_DIR/.deployed-at"
          echo "✅ Site published to $LIVE_DIR"
          EOSSH

      # Quick, non-blocking sanity checks (no nginx edits)
      - name: Sanity (non-blocking)
        continue-on-error: true
        run: |
          ssh "$SSH_USER@$SSH_HOST" "PROJECT_DIR='$PROJECT_DIR' DOMAIN='$DOMAIN' bash -s" <<'EOSSH'
          set +e
          echo "🔎 HEAD via local HTTP (Host header)"
          curl -sI -H "Host: $DOMAIN" http://127.0.0.1/ | sed -n '1,8p'
          echo "🔎 HEAD via local HTTPS (ignore verify, resolve to 127.0.0.1)"
          curl -skI --resolve "$DOMAIN:443:127.0.0.1" "https://$DOMAIN/" | sed -n '1,8p'
          EOSSH

      - name: Recently modified files in live site
        run: |
          ssh "$SSH_USER@$SSH_HOST" "find '$PROJECT_DIR/site_live' -type f -printf '🕒 %TY-%Tm-%Td %TH:%TM:%TS %p\n' | sort -r | head -n 12 || true"
