name: Deploy and verify live site

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  SSH_USER: root
  SSH_HOST: 213.239.193.208
  PROJECT_DIR: /var/www/ergodocs
  DOMAIN: docs.ergoplatform.com
  JUPYTER_PLATFORM_DIRS: "1"

jobs:
  deploy:
    name: Deploy and verify live site
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install SSH key
        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{ secrets.DEPLOY_KEY }}
          known_hosts: ${{ secrets.KNOWN_HOSTS }}

      - name: üöÄ Deploy to ${{ env.SSH_USER }}@${{ env.SSH_HOST }}
        shell: bash
        run: |
          set -Eeuo pipefail
          echo "üìÇ Confirm project dir"
          ssh "$SSH_USER@$SSH_HOST" 'test -d "'"$PROJECT_DIR"'" && echo "OK: $PROJECT_DIR exists" || { echo "‚ùå $PROJECT_DIR missing"; exit 1; }'

          echo "üîß Toolchain"
          ssh "$SSH_USER@$SSH_HOST" <<'EOF'
            set -Eeuo pipefail
            cd "$PROJECT_DIR"

            echo "üîÑ Git pull"
            git stash --include-untracked || true
            git pull --ff-only

            echo "üêç venv"
            if [ -x .venv/bin/python ]; then
              . .venv/bin/activate
            else
              apt update -y && apt install -y python3-venv
              python3 -m venv .venv
              . .venv/bin/activate
            fi

            echo "üì¶ deps (no strict pins)"
            python -m pip install -U pip
            python -m pip install -r requirements.txt || true
            # Ensure critical plugins exist even if requirements missed them
            python -m pip install -U mkdocs mkdocs-material neoteroi-mkdocs mkdocs-section-index mkdocs-autolinks-plugin mkdocs-rss-plugin mkdocs-glightbox mkdocs-render-swagger-plugin mkdocs-jupyter mkdocs-git-revision-date-localized-plugin

            echo "üßπ Clean old build"
            rm -rf site || true

            echo "üèó mkdocs build (warnings allowed)"
            # DO NOT use --strict; warnings must not fail deploy
            mkdocs build

            echo "üîÅ Atomic symlink swap to site_live"
            # Build output is ./site; swap symlink atomically to avoid half-deployed state
            TS="$(date +%Y%m%d%H%M%S)"
            rm -rf "site_prev" || true
            if [ -L site_live ]; then
              mv -T site_live "site_prev" || true
            fi
            ln -sfn "$PWD/site" site_live
            chown -h caddy:caddy site_live || true
            chown -R caddy:caddy site/ || true

            echo "üëÄ List some paths"
            ls -lah | sed -n '1,80p'
            echo "‚Äî‚Äî site_live head ‚Äî‚Äî"
            find site_live -maxdepth 2 -type f -name index.html | head -n 5 | xargs -I{} sh -c 'echo ">>> {}" ; stat -c "%y %n" "{}" 2>/dev/null || stat "{}" ; head -n 20 "{}" | sed "s/^/    /" ; echo'

            echo "üß™ Local origin curl (bypass Cloudflare)"
            # HTTP direct
            curl -sS -D - -o /tmp/home_http.html -H "Host: ${DOMAIN}" http://127.0.0.1/ | sed -n '1,15p' || true
            echo "--- http size ---"
            wc -c /tmp/home_http.html || true
            # HTTPS direct (SNI/resolve to loopback; -k in case of origin cert)
            curl -sS -k -D - -o /tmp/home_https.html --resolve "${DOMAIN}:443:127.0.0.1" "https://${DOMAIN}/" | sed -n '1,20p' || true
            echo "--- https size ---"
            wc -c /tmp/home_https.html || true
          EOF

      - name: üîç Recently updated files on server
        shell: bash
        run: |
          ssh "$SSH_USER@$SSH_HOST" "find '$PROJECT_DIR/site' -type f -printf 'üïí %TY-%Tm-%Td %TH:%TM:%TS %p\n' | sort -r | head -n 12 || true"

      - name: üåê External smoke tests (through Cloudflare)
        shell: bash
        continue-on-error: true
        run: |
          set -Eeuo pipefail
          BASE="https://${DOMAIN}"
          echo "üîé Fetch live homepage HTML"
          # Smaller timeouts to fail fast if origin is stalling behind CF
          curl -fsS --max-time 20 --connect-timeout 5 -H 'Cache-Control: no-cache' "$BASE/" > /tmp/home.html || { echo "‚ùå curl failed (likely 52x from CF)"; exit 1; }
          grep -q "</html>" /tmp/home.html || { echo "‚ùå Live HTML incomplete"; exit 1; }

          echo "üîé Extract asset URLs from live HTML"
          LIVE_JS=$(grep -o 'assets/javascripts/[^"]*' /tmp/home.html | sort -u)
          LIVE_CSS=$(grep -o 'assets/stylesheets/[^"]*' /tmp/home.html | sort -u)

          echo "‚úÖ Check each asset returns 200"
          FAIL=0
          for f in $LIVE_JS $LIVE_CSS; do
            url="$BASE/$f"
            code=$(curl -s -m 15 --connect-timeout 5 -o /dev/null -w "%{http_code}" "$url" || echo "000")
            echo "$code $url"
            [ "$code" = "200" ] || FAIL=1
          done
          if [ "$FAIL" -ne 0 ]; then
            echo "‚ùå One or more assets failed to serve 200 (possible blank page)"
            exit 1
          fi

          echo "üß™ Smoke-check a content page"
          curl -fsS --max-time 20 --connect-timeout 5 -H 'Cache-Control: no-cache' "$BASE/faq/" | grep -q "</html>" || { echo "‚ùå FAQ page did not return valid HTML"; exit 1; }

      - name: üßæ Dump origin logs if checks failed (nginx & systemd)
        if: always()
        shell: bash
        run: |
          echo "üìú Tail nginx logs (access & error)"
          ssh "$SSH_USER@$SSH_HOST" "sudo tail -n 200 /var/log/nginx/access.log || true"
          ssh "$SSH_USER@$SSH_HOST" "sudo tail -n 200 /var/log/nginx/error.log || true"

          echo "üßæ journalctl nginx"
          ssh "$SSH_USER@$SSH_HOST" "sudo journalctl -u nginx -n 200 --no-pager || true"

          echo "üß™ sockets"
          ssh "$SSH_USER@$SSH_HOST" "sudo ss -ltnp | egrep ':80|:443' || true"

          echo "üìÑ active server blocks mentioning ${DOMAIN}"
          ssh "$SSH_USER@$SSH_HOST" "sudo nginx -T 2>&1 | awk '/server_name/{print NR\":\"\$0} /root|alias|location|listen|return 301|proxy_pass/{print NR\":\"\$0}' | grep -C2 '${DOMAIN}' || true"

          echo "üß™ direct origin (again) with headers"
          ssh "$SSH_USER@$SSH_HOST" "curl -sS -D - -o /dev/null -H 'Host: ${DOMAIN}' http://127.0.0.1/ || true"
          ssh "$SSH_USER@$SSH_HOST" "curl -sS -k -D - -o /dev/null --resolve '${DOMAIN}:443:127.0.0.1' https://${DOMAIN}/ || true"

      - name: ‚ùå Fail if external smoke tests failed
        if: steps['External smoke tests (through Cloudflare)'].outcome == 'failure'
        run: |
          echo "External smoke tests failed (likely Cloudflare 524). See logs above."
          exit 1
