name: Docs CI

on:
  push:
    branches:
      - '**'
  pull_request:
  workflow_dispatch:

concurrency:
  group: docs-ci-v2-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  pages: write
  id-token: write

jobs:
  build:
    name: Build documentation
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
          cache-dependency-path: requirements.txt

      - name: Install dependencies
        run: pip install -r requirements.txt

      - name: Build MkDocs site
        run: mkdocs build --strict

      - name: Configure GitHub Pages
        if: github.event_name == 'pull_request' || github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
        uses: actions/configure-pages@v5

      - name: Upload MkDocs artifact
        uses: actions/upload-artifact@v4
        with:
          name: mkdocs-site
          path: site

      - name: Upload GitHub Pages artifact
        if: github.event_name == 'pull_request' || github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
        uses: actions/upload-pages-artifact@v3
        with:
          path: site

  deploy-preview:
    name: Deploy preview to GitHub Pages
    needs: build
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    permissions:
      pages: write
      id-token: write
    environment:
      name: github-pages-preview
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Deploy preview
        id: deployment
        uses: actions/deploy-pages@v4
        with:
          preview: true

  deploy-production:
    name: Deploy to production server
    needs: build
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install SSH key
        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{ secrets.DEPLOY_KEY }}
          known_hosts: ${{ secrets.KNOWN_HOSTS }}

      - name: Remote deploy via SSH
        run: |
          echo "üöÄ Deploying to remote server..."
          ssh root@213.239.193.208 "export GITHUB_SHA=$GITHUB_SHA; bash -s" <<'EOF'
            set -eo pipefail

            echo "üìÇ Changing to project directory..."
            cd /var/www/ergodocs || { echo "‚ùå Failed to cd to project dir"; exit 1; }

            echo "üîÑ Resetting repository to expected commit..."
            git fetch origin main || { echo "‚ùå Git fetch failed"; exit 1; }
            git reset --hard "${GITHUB_SHA}" || { echo "‚ùå Git reset failed"; exit 1; }
            git clean -fd

            if ! dpkg -s python3-venv >/dev/null 2>&1; then
              echo "üß∞ Installing python3-venv..."
              apt-get update -y && apt-get install -y python3-venv
            fi

            echo "üêç Setting up virtual environment..."
            if [ ! -d .venv ]; then
              python3 -m venv .venv
            fi
            source .venv/bin/activate

            echo "üì¶ Installing dependencies..."
            pip install --upgrade pip
            pip install -r requirements.txt || { echo "‚ùå Pip install failed"; exit 1; }

            echo "üßπ Cleaning old MkDocs site..."
            rm -rf site || echo "‚ö†Ô∏è Failed to remove site dir"

            echo "üß∞ Tool versions on remote:"
            mkdocs --version || echo "mkdocs not found"
            python3 --version || true
            pip --version || true
            echo "pip mkdocs-related packages:"
            pip freeze | grep -E '^(mkdocs|mkdocs-|mkdocs_material|mkdocs-material|neoteroi|pymdownx)' || true

            echo "üèó Building MkDocs site (strict)..."
            set +e
            mkdocs build --strict 2>&1 | tee build.log
            BUILD_EXIT=${PIPESTATUS[0]}
            set -e
            if [ "$BUILD_EXIT" -ne 0 ]; then
              echo "‚ùå MkDocs build failed on remote (exit $BUILD_EXIT). Showing last 200 lines of build.log:"
              tail -n 200 build.log || true
              exit "$BUILD_EXIT"
            fi

            echo "ü™™ Writing deploy metadata..."
            echo "${GITHUB_SHA}" > site/deploy-sha.txt
            date -u +"%Y-%m-%dT%H:%M:%SZ" > site/deploy-timestamp.txt
          EOF

      - name: Remote build log (last 200 lines)
        if: always()
        run: |
          echo "üîé Remote build log (if present):"
          ssh root@213.239.193.208 'if [ -f /var/www/ergodocs/build.log ]; then tail -n 200 /var/www/ergodocs/build.log; else echo "No build.log"; fi'

      - name: Verify remote site files
        run: |
          echo "üîç Checking recently updated files..."
          ssh root@213.239.193.208 'find /var/www/ergodocs/site -type f -printf "üïí %TY-%Tm-%Td %TH:%TM:%TS %p\n" | sort -r | head -n 10'

      - name: Check web server served files
        run: |
          echo "üîç Verifying web server output..."
          set -o pipefail

          PUBLIC_URL="https://docs.ergoplatform.com/deploy-sha.txt"
          IP_URL="http://213.239.193.208/deploy-sha.txt"

          echo "GET $PUBLIC_URL"
          PUB_CODE=$(curl -sS -o /tmp/pub_out -w "%{http_code}" --max-time 15 "$PUBLIC_URL" || true)
          if [ "$PUB_CODE" = "200" ]; then
            DEPLOYED_SHA=$(cat /tmp/pub_out)
            echo "‚úÖ Public URL OK (200). Body:"
            echo "$DEPLOYED_SHA"
          else
            echo "‚ùå Public URL failed. HTTP $PUB_CODE"
            echo "Headers:"
            curl -sSI --max-time 10 "$PUBLIC_URL" || true
          fi

          echo "GET $IP_URL"
          IP_CODE=$(curl -sS -o /tmp/ip_out -w "%{http_code}" --max-time 5 "$IP_URL" || true)
          if [ "$IP_CODE" = "200" ]; then
            IP_SHA=$(cat /tmp/ip_out)
            echo "‚úÖ Direct IP OK (200). Body:"
            echo "$IP_SHA"
          else
            echo "‚ùå Direct IP failed. HTTP $IP_CODE"
            curl -sSI --max-time 5 "$IP_URL" || true
          fi

          # If public fails with 52x but IP is OK, it's likely CDN/Cloudflare (e.g., 524 timeout to origin)
          if [ "$PUB_CODE" != "200" ] && [ "$IP_CODE" = "200" ]; then
            echo "‚ö†Ô∏è Public URL failed but origin is reachable directly. Likely CDN/Cloudflare issue (HTTP $PUB_CODE)."
            DEPLOYED_SHA="$IP_SHA"
          fi

          # If both fail, gather SSH diagnostics from origin
          if [ "$PUB_CODE" != "200" ] && [ "$IP_CODE" != "200" ]; then
            echo "‚ùå Both public and direct IP failed. Gathering diagnostics from origin via SSH..."

            ssh root@213.239.193.208 "bash -s" <<'EOF'
              set -euo pipefail
              echo "== remote: nginx config test =="
              nginx -t || true
              echo "== remote: systemctl status nginx =="
              systemctl status nginx --no-pager || true
              echo "== remote: tail nginx error log =="
              tail -n 200 /var/log/nginx/error.log || true
              echo "== remote: ls site root =="
              ls -lah /var/www/ergodocs/site | sed -n '1,80p' || true
              echo "== remote: show site/deploy-sha.txt =="
              if [ -f /var/www/ergodocs/site/deploy-sha.txt ]; then cat /var/www/ergodocs/site/deploy-sha.txt; else echo "MISSING"; fi
              echo "== remote: curl localhost/deploy-sha.txt =="
              curl -v --max-time 5 http://127.0.0.1/deploy-sha.txt || true
              echo "== remote: listening sockets =="
              ss -ltnp || true
EOF
            echo "‚ùå Origin diagnostics printed above. Failing for visibility."
            exit 1
          fi

          # Compare SHA if available
          DEPLOYED_SHA=${DEPLOYED_SHA:-$IP_SHA}
          if [ -z "$DEPLOYED_SHA" ]; then
            echo "‚ùå Could not determine deployed SHA."
            exit 1
          fi
          echo "üåê Reported commit: $DEPLOYED_SHA"
          if [ "$DEPLOYED_SHA" != "$GITHUB_SHA" ]; then
            echo "‚ùå Mismatch: remote=$DEPLOYED_SHA expected=$GITHUB_SHA"
            exit 1
          fi
          echo "‚úÖ Remote site matches expected commit"
