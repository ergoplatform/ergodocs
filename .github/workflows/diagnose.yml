name: Diagnose docs + sigma routing

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  diagnose:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    env:
      SSH_USER: ${{ secrets.SSH_USER || 'root' }}
      SSH_HOST: ${{ secrets.SSH_HOST || '213.239.193.208' }}
      DOMAIN_DOCS: ${{ secrets.DOMAIN_DOCS || 'docs.ergoplatform.com' }}
      DOMAIN_SIGMA: ${{ secrets.DOMAIN_SIGMA || 'sigmaverse.io' }}
      PROJECT_DIR: ${{ secrets.PROJECT_DIR || '/var/www/ergodocs' }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install SSH key
        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{ secrets.DEPLOY_KEY }}
          known_hosts: ${{ secrets.KNOWN_HOSTS }}

      - name: Server diagnostics (read-only)
        shell: bash
        run: |
          set +e  # never fail; this is for visibility

          echo "üîê SSH to ${SSH_USER:-root}@${SSH_HOST}"
          ssh -o LogLevel=ERROR "${SSH_USER:-root}@${SSH_HOST}" bash <<'EOSSH'
            set +e
            d_docs="${DOMAIN_DOCS:-docs.ergoplatform.com}"
            d_sigma="${DOMAIN_SIGMA:-sigmaverse.io}"
            proj="${PROJECT_DIR:-/var/www/ergodocs}"

            echo "üñ• uname/uptime:"; uname -a; uptime; echo
            echo "üåê nginx -v/-t:"; nginx -v 2>&1; nginx -t 2>&1; echo

            echo "üìÅ /etc/nginx/sites-enabled:"
            ls -lah /etc/nginx/sites-enabled/ 2>/dev/null || true
            echo

            echo "üîé grep server_name for our domains:"
            grep -RinE 'server_name\s+.*(docs\.ergoplatform\.com|sigmaverse\.io)' \
              /etc/nginx/sites-enabled /etc/nginx/sites-available 2>/dev/null || true
            echo

            echo "ü™µ Ports listening (80/443):"
            ss -ltnp 2>/dev/null | grep -E ':(80|443)\s' || netstat -ltnp 2>/dev/null | grep -E ':(80|443)\s' || true
            echo

            echo "üß™ curl local HTTP with Host: \$d_docs"
            curl -sSI -H "Host: \$d_docs" http://127.0.0.1/ | sed -n '1,12p' || echo "curl failed"
            echo

            echo "üß™ curl local HTTP with Host: \$d_sigma"
            curl -sSI -H "Host: \$d_sigma" http://127.0.0.1/ | sed -n '1,12p' || echo "curl failed"
            echo

            echo "üß™ curl local HTTPS (ignore verify) with Host: \$d_docs"
            curl -skI --resolve "\$d_docs:443:127.0.0.1" "https://\$d_docs/" | sed -n '1,14p' || echo "curl failed"
            echo

            echo "üß™ curl local HTTPS (ignore verify) with Host: \$d_sigma"
            curl -skI --resolve "\$d_sigma:443:127.0.0.1" "https://\$d_sigma/" | sed -n '1,14p' || echo "curl failed"
            echo

            echo "üìÇ site_live exists? \$proj/site_live"
            test -d "\$proj/site_live" && ls -1 "\$proj/site_live" | head -n 20 || echo "missing"
            echo

            echo "üóí /var/log/nginx/error.log (tail 50):"
            tail -n 50 /var/log/nginx/error.log 2>/dev/null || true
            echo

            echo "üóí /var/log/nginx/access.log (tail 30):"
            tail -n 30 /var/log/nginx/access.log 2>/dev/null || true
            echo

            echo "‚úÖ diagnostics done (no changes made)."
          EOSSH
