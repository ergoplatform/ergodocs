name: CI

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      JUPYTER_PLATFORM_DIRS: "1"

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install deps
        run: |
          python -m pip install -U pip
          python -m pip install -r requirements.txt

      - name: MkDocs build (strict; show real failures)
        shell: bash
        run: |
          set -Eeuo pipefail
          trap 'echo "‚ùå Build failed; last 200 lines:"; tail -n 200 build.log || true' ERR

          echo "üèó mkdocs build --strict -v"
          mkdocs build --strict -v |& tee build.log
          code=${PIPESTATUS[0]}
          echo "mkdocs exit=$code"
          if [ "$code" -ne 0 ]; then
            exit "$code"
          fi

      - name: Upload built site and asset lists
        uses: actions/upload-artifact@v4
        with:
          name: site-artifacts
          path: |
            site
            artifact_js.txt
            artifact_css.txt

  deploy:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with:
          name: site-artifacts
          path: site

      - name: Install SSH key
        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{ secrets.DEPLOY_KEY }}
          known_hosts: ${{ secrets.KNOWN_HOSTS }}

      - name: Remote build & atomic publish
        run: |
          ssh root@213.239.193.208 <<'EOF'
            set -euo pipefail
            export JUPYTER_PLATFORM_DIRS=1
            cd /var/www/ergodocs
            git stash --include-untracked || true
            git pull --rebase
            python3 -m venv .venv
            source .venv/bin/activate
            python -m pip install -U pip
            python -m pip install -r requirements.txt
            rm -rf site || true
            mkdocs build --strict -v
            # atomic publish: build to tmp then swap
            ts=$(date +%s)
            rm -rf site_next && mv site site_next
            rm -rf site_prev || true
            if [ -d site_live ]; then mv site_live site_prev; fi
            mv site_next site_live
            ln -sfn site_live site
          EOF

      - name: Verify HTML and assets served (fail if any 404)
        run: |
          set -euo pipefail
          BASE="https://docs.ergoplatform.com"
          # cache-bust HTML
          echo "üîé Fetching homepage HTML"
          curl -fsS -H 'Cache-Control: no-cache' "$BASE/" > /tmp/home.html
          # extract the JS/CSS actually referenced by the live HTML
          LIVE_JS=$(grep -o 'assets/javascripts/[^"]*' /tmp/home.html | sort -u)
          LIVE_CSS=$(grep -o 'assets/stylesheets/[^"]*' /tmp/home.html | sort -u)
          echo "JS from live HTML:"; printf "%s\n" $LIVE_JS
          echo "CSS from live HTML:"; printf "%s\n" $LIVE_CSS

          echo "‚úÖ Checking each asset returns 200"
          FAIL=0
          for f in $LIVE_JS $LIVE_CSS; do
            url="$BASE/$f"
            code=$(curl -s -o /dev/null -w "%{http_code}" "$url")
            echo "$code $url"
            [ "$code" = "200" ] || FAIL=1
          done
          [ "$FAIL" -eq 0 ] || { echo "‚ùå One or more assets failed to serve 200"; exit 1; }

          echo "üß™ Smoke-check a content page"
          curl -fsS -H 'Cache-Control: no-cache' "$BASE/faq/" | grep -q "</html>" || { echo "‚ùå FAQ page did not return valid HTML"; exit 1; }
